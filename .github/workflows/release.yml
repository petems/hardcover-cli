name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race ./...
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not widely supported yet
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        BINARY_NAME=hardcover
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -ldflags="-s -w -X main.version=${VERSION}" -o ${BINARY_NAME} .
        
        # Create archive
        ARCHIVE_NAME="hardcover-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${ARCHIVE_NAME}.zip" ${BINARY_NAME} README.md LICENSE
          echo "ASSET=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" ${BINARY_NAME} README.md LICENSE
          echo "ASSET=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ASSET }}
        path: ${{ env.ASSET }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display structure of downloaded files
      run: ls -R ./artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Changes in this Release
          
          See the [CHANGELOG](CHANGELOG.md) for detailed information about this release.
          
          ## Installation
          
          Download the appropriate binary for your platform:
          
          - **Linux (amd64)**: `hardcover-${{ github.ref }}-linux-amd64.tar.gz`
          - **Linux (arm64)**: `hardcover-${{ github.ref }}-linux-arm64.tar.gz`
          - **macOS (amd64)**: `hardcover-${{ github.ref }}-darwin-amd64.tar.gz`
          - **macOS (arm64)**: `hardcover-${{ github.ref }}-darwin-arm64.tar.gz`
          - **Windows (amd64)**: `hardcover-${{ github.ref }}-windows-amd64.zip`
          
          Extract the archive and move the binary to a directory in your PATH.
          
          ## Usage
          
          ```bash
          # Set your API key
          export HARDCOVER_API_KEY="your-api-key"
          
          # Or use config file
          hardcover config set-api-key "your-api-key"
          
          # Get help
          hardcover --help
          
          # Example commands
          hardcover me
          hardcover search books "golang"
          hardcover book get 12345
          ```
    
    - name: Upload Release Assets
      run: |
        for artifact in ./artifacts/*/; do
          file=$(find "$artifact" -type f \( -name "*.tar.gz" -o -name "*.zip" \))
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ github.ref }} "$file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: hardcover-cli
        homebrew-tap: your-username/homebrew-tap
        base-branch: main
        download-url: https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/hardcover-${{ github.ref }}-darwin-amd64.tar.gz
      env:
        COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}