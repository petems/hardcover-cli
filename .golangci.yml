# golangci-lint configuration for v2.3.0
# Based on: https://gist.github.com/maratori/47a4d00457a92aa426dbd48a18776322

version: "2"

issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 10

linters:
  enable:
    - asasalint # checks for pass []any as any in variadic func(...any)
    - asciicheck # checks that your code does not contain non-ASCII identifiers
    - bidichk # checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - copyloopvar # detects places where loop variables are copied (Go 1.22+)
    - cyclop # checks function and package cyclomatic complexity
    - depguard # checks if package imports are in a list of acceptable packages
    - dupl # tool for code clone detection
    - durationcheck # checks for two durations multiplied together
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive # checks exhaustiveness of enum switch statements
    - fatcontext # detects nested contexts in loops
    - forbidigo # forbids identifiers
    - funlen # tool for detection of long functions
    - gocheckcompilerdirectives # validates go compiler directive comments (//go:)
    - gochecknoglobals # checks that no global variables exist
    - gochecknoinits # checks that no init functions are present in Go code
    - gocognit # computes and checks the cognitive complexity of functions
    - goconst # finds repeated strings that could be replaced by a constant
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gocyclo # computes and checks the cyclomatic complexity of functions
    - godot # checks if comments end in a period
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec # inspects source code for security problems
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - loggercheck # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero # finds slice declarations with non-zero initial length
    - mirror # reports wrong mirror patterns of bytes/strings usage
    - mnd # detects magic numbers
    - musttag # enforces field tags in (un)marshaled structs
    - nakedret # finds naked returns in functions greater than a specified function length
    - nestif # reports deeply nested if statements
    - nilerr # finds the code that returns nil even if it checks that the error is not nil
    - nilnil # checks that there is no simultaneous return of nil error and an invalid value
    - noctx # finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - nonamedreturns # reports all named returns
    - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
    - perfsprint # checks that fmt.Sprintf can be replaced with a faster alternative
    - predeclared # finds code that shadows one of Go's predeclared identifiers
    - reassign # checks that package variables are not reassigned
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sloglint # ensure consistent code style when using log/slog
    - spancheck # checks for mistakes with OpenTelemetry/Census spans
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - testableexamples # checks if examples are testable (have an expected output)
    - testifylint # checks usage of github.com/stretchr/testify
    - testpackage # makes you use a separate _test package
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # removes unnecessary type conversions
    - unparam # reports unused function parameters
    - unused # checks for unused constants, variables, functions and types
    - usestdlibvars # detects the possibility to use variables/constants from the Go standard library
    - wastedassign # finds wasted assignment statements
    - whitespace # detects leading and trailing whitespace

  disable:
    - gochecknoglobals # Allow global variables (needed for CLI app)
    - gochecknoinits # Allow init functions (common in CLI apps)

  settings:
    cyclop:
      # The maximal code complexity to report.
      # Default: 10
      max-complexity: 15
      # The maximal average package complexity.
      # Default: 0.0
      package-average: 10.0

    depguard:
      rules:
        main:
          files:
            - "cmd/**/*.go"
            - "main.go"
          allow:
            - $gostd
            - github.com/spf13/cobra
            - hardcover-cli/internal/client
            - hardcover-cli/internal/config
        test:
          files:
            - "**/*_test.go"
          allow:
            - $gostd
            - github.com/spf13/cobra
            - github.com/stretchr/testify
            - hardcover-cli/internal/client
            - hardcover-cli/internal/config
            - hardcover-cli/internal/testutil
            - gopkg.in/yaml.v3

    errcheck:
      # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
      # Default: false
      check-type-assertions: true

    exhaustive:
      # Program elements to check for exhaustiveness.
      # Default: [ switch ]
      check:
        - switch
        - map

    funlen:
      # Checks the number of lines in a function.
      # Default: 60
      lines: 80
      # Checks the number of statements in a function.
      # Default: 40
      statements: 50

    gocognit:
      # Minimal code complexity to report.
      # Default: 30
      min-complexity: 15

    gocritic:
      # Settings passed to gocritic.
      settings:
        captLocal:
          # Whether to restrict checker to params only.
          # Default: true
          paramsOnly: false
        underef:
          # Whether to skip (*x).method() calls where x is a pointer receiver.
          # Default: true
          skipRecvDeref: false

    govet:
      # Enable all analyzers.
      # Default: false
      enable-all: true
      # Disable analyzers by name.
      disable:
        - fieldalignment # too strict for CLI tool
      settings:
        shadow:
          # Whether to be strict about shadowing; can be noisy.
          # Default: false
          strict: true

    mnd:
      # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
      # Default: ["argument", "case", "condition", "operation", "return", "assign"]
      checks:
        - argument
        - case
        - condition
        - operation
        - return
        - assign
      # List of numbers to exclude from analysis.
      ignored-numbers:
        - '0'
        - '1'
        - '2'
        - '3'
        - '10'
        - '100'
        - '200'
        - '400'
        - '401'
        - '404'
        - '500'

    nakedret:
      # Make an issue if func has more lines of code than this setting, and it has naked returns.
      # Default: 30
      max-func-lines: 15

    nestif:
      # Minimal complexity of if statements to report.
      # Default: 5
      min-complexity: 4

    nolintlint:
      # Require machine-readable nolint directives (i.e. with no leading space).
      # Default: false
      require-specific: true

    revive:
      # Maximum number of open files at the same time.
      # Default: 0 (unlimited)
      max-open-files: 2048
      # Enable all available rules.
      # Default: false
      enable-all-rules: false
      # List of available rules: https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md
      rules:
        # Disabled rules from default
        - name: blank-imports
        - name: context-as-argument
        - name: context-keys-type
        - name: dot-imports
        - name: empty-block
        - name: error-naming
        - name: error-return
        - name: error-strings
        - name: errorf
        - name: exported
        - name: increment-decrement
        - name: indent-error-flow
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: redefines-builtin-id
        - name: superfluous-else
        - name: time-naming
        - name: unexported-return
        - name: unreachable-code
        - name: unused-parameter
        - name: var-declaration
        - name: var-naming

    staticcheck:
      # Enable all checks.
      # Default: ["*"]
      checks: ["all"]

    testifylint:
      # Enable all checkers (https://github.com/Antonboom/testifylint#checkers).
      # Default: false
      enable-all: true

    unused:
      # Mark all struct fields that have been written to as used.
      # Default: true
      field-writes-are-uses: true
      # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation.
      # Default: false
      post-statements-are-reads: true
      # Mark all exported identifiers as used.
      # Default: true
      exported-fields-are-used: true

  exclusions:
    # Exclude some linters from running on tests files.
    rules:
      - path: _test\.go
        linters:
          - gocyclo
          - errcheck
          - dupl
          - gosec
          - funlen
          - gocognit
          - cyclop

      # Exclude some staticcheck messages
      - linters:
          - staticcheck
        text: "SA9003:"

      # Exclude magic number detection for common HTTP status codes and test values
      - linters:
          - mnd
        text: "Magic number:"

    # Predefined exclusion rules.
    presets:
      - comments
      - std-error-handling
      - common-false-positives
      - legacy

formatters:
  enable:
    - goimports # checks if the code and import statements are formatted according to the 'goimports' command
    - golines # checks if code is formatted, and fixes long lines

  settings:
    goimports:
      # A list of prefixes, which, if set, checks import paths
      # with the given prefixes are grouped after 3rd-party packages.
      local-prefixes:
        - hardcover-cli

    golines:
      # Target maximum line length.
      # Default: 100
      max-len: 120

run:
  # Timeout for total work.
  # Default: 0 (disabled)
  timeout: 5m

  # Include test files or not.
  # Default: true
  tests: true

  # Define the Go version limit.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.22.
  go: '1.22'

output:
  # Show statistics per linter.
  # Default: true
  show-stats: true

  # Sort results by: file, linter, and severity.
  # Default: ["linter", "file"]
  sort-order:
    - linter
    - severity
    - file
